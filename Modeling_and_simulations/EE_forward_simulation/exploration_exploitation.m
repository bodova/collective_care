%% Exploration-exploitation model
%% changing N, function of ratio

%% - uses fixed state durations
%% - contains also the rest state
%% - G state has a fixed duration
%% - all ants groom at the same time

%% N ants, NL of them loaded + N focal grooming ants
%% initial load - normal distribution with mean ML and standard deviation SL
%% states: 0=rest, 1=sample, 2=groom

%% PARAMETERS
%% KEY: N - number of ants, NL - number of infected,
%%      L0, eps - sequential rule parameters
%%      K - max rule parameters
%% OTHER: tE, tG - time of exploration/grooming, ML - initial load
%%        rV, rK - MM dynamics,

clear; clc
K = 30;                         % number of sampled ants in the MAX rule
N = 30;                         % number of ants
NL = N/3;                       % number of ants with nonzero load
ratioN = 0.5;
resSEQ = [];
resMAX = [];
tmp = [];


tE = 10;                        % duration of exploration phase
tG = 100;                       % duration of uninterrupted grooming
rV = 1;                         % MM model: decay rate of the load
rK = 100;                       % MM model: constant in MM dynamics dL = -rV*L/(L+rK)(times number of allogrooming ants) if allo groomed 
ML = 1e2;                       % initial load mean
SL = 0;                         % initial load std
AL = abs(SL*randn(1,NL)+ML);    % loads of loaded ants
L0 = 10;
ep = 0.01;                      % baseline acceptance probability for the unloaded ant
fprintf(1,'\nK = %d, tE = %d, L0 = %d',K,tE,L0)


% %% ----------> MAX LOAD MODEL - deterministic when N=K
T = 1e4;
[L,Srec,Sper,AntTO,Trem] = EE_max(AL,N,NL,K,tG,tE,rV,rK,T);
%plot([0:T],sum(L'),'r--','linewidth',4)
fun_plot(1,L,Srec,Sper,AntTO,Trem,N,NL,L0,T,ML)
LL = sum(L')/NL;        % average of loaded ants
PM = find(LL<LL(1)/10,1);  % when only 10 % of loas remains
data = reshape(Sper,1,[]);



% %% ----------> SEQUENTIAL MODEL
T = 1e4;
[L,Srec,Sper,AntTO,Trem] = EE_seq(AL,N,NL,L0,ep,tG,tE,rV,rK,T);
fun_plot(2,L,Srec,Sper,AntTO,Trem,N,NL,L0,T,ML)
LL = sum(L')/NL;        % average of loaded ants

function[L,Srec,Sper,AntTO,Trem] = EE_seq(AL,N,NL,L0,ep,tG,tE,rV,rK,T)
%% exploration-exploitation tradeoff - sequential sampling
%% p of switching is an increasing function of L/L0: 1-exp(-L/L0-ep)
    %%---> STATES: 0-Explore, 1-Groom
    %%---> [L,Srec,Sper,AntTO,Trem]
    L = zeros(T+1,N);        % load array: (times) x (ants)
    L(1,1:NL) = AL;          % initial load vector, first NL ants have nonzero load
    Srec = ones(T+1,N);      % state array received: (times) x (ants) (0-nothing, 1-grooming)
    Sper = ones(T+1,N);      % state array performed: (times) x (ants) (0-explore, 1-groom)
    AntTO = zeros(T+1,N);    % exploring/grooming AntTO: (times) x (ants)
    id_Ants = randi(N-1,[1,N]);   % i-th ant targets ant in the i-th component of this array, ant cannot groom itself
    for i=1:N
        tmp = 1:N; tmp(i) = [];
        AntTO(1,i) = tmp(id_Ants(i));
    end
    rnd1 = rand(1,1e4);      % random uniform numbers
    rnd2 = ceil((N-1)*rand(1,1e4));      % random uniform numbers
    Trem = zeros(T+1,N);    % how much time unots are remaining in this state including now. If 1 them new sampling is done
    Trem(1,:) = tE;         % initial state is Explore
    it = 0;                 % iterator (time/frame), starts in the loop with 1
    itm = 0;                % time check
    ir1 = 0;                 % random iterator
    ir2 = 0;                 % random iterator
    %%---------->
    while it < T        % iterates until terminal time reached
        
        it = it+1; 
        itm = itm + 1;
        if ir1 > 1e4-N-2
            ir1 = 1;
            rnd1 = rand(1,1e4);
        end
        if ir2 > 1e4-N-2
            ir2 = 1;
            rnd2 = ceil((N-1)*rand(1,1e4));
        end
        if it>itm*100000
            fprintf(1,'\n(S) T=%d',it)
            itm = itm + 1;
        end
           
        for ant = 1:N % the focal ant that grooms, etc
            p = 1-exp(-L(it,AntTO(it,ant))/L0-ep); % probability of grooming this ant
            L(it+1,:) = L(it,:);
            if Trem(it,ant) == 1    % change of state in the next time instant
                ir2 = ir2+1;
                id_Ants = rnd2(ir2);%  randi(N-1,[1,1]); % make more efficient!!!
                if id_Ants >= AntTO(it,ant);
                    id_Ants = id_Ants+1;
                end
                AntTO(it+1,ant) = id_Ants;%tmp(id_Ants); % pick a new ant (no matter what the state change will be - if 2->1 then thi)
                if Sper(it,ant) == 2
                    Sper(it+1,ant) = 1;
                    dL = min(rV*L(it,AntTO(it,ant))/(L(it,AntTO(it,ant))+rK),L(it,AntTO(it,ant)));     % load changes according to the current state, not updated
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant)) - dL; % update load of the receiving ant
                else
                    ir1 = ir1+1;
                    if rnd1(ir1) < p
                        Sper(it+1,ant) = 2;
                    else
                        Sper(it+1,ant) = 1;
                    end
                        
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant));      % load does not change
                end
                
                if Sper(it+1,ant) == 2                              % state overwrite only if the state is G, time overwrite according to the new state
                    AntTO(it+1,ant) = AntTO(it,ant);                % the same ant but started to groom it
                    Srec(it+1,AntTO(it+1,ant)) = 2;                 % change the state in the received state vector - if state is G
                    Trem(it+1,ant) = tG;                            % G state duration
                else
                    Trem(it+1,ant) = tE;                            % E state duration
                end
            

            else
                Trem(it+1,ant) = Trem(it,ant) - 1;  % update remaining time
                Sper(it+1,ant) = Sper(it,ant);      % no change in the state
                AntTO(it+1,ant) = AntTO(it,ant);    % no change in the target ant
                if Sper(it,ant) == 2                % load changes according to the current state, not updated
                    dL = min(rV*L(it,AntTO(it,ant))/(L(it,AntTO(it,ant))+rK),L(it,AntTO(it,ant)));     % change of the load
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant)) - dL; % update load of the receiving ant
                else
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant));      % load does not change 
                end
                
                if Sper(it+1,ant) == 2              % state overwrite only if the new state is G
                    Srec(it+1,AntTO(it,ant)) = 2;   % no change in the received state, but do not want to replace 2 by 1
                end
            end 

        end
    end
end

    
function[L,Srec,Sper,AntTO,Trem] = EE_max(AL,N,NL,K,tG,tE,rV,rK,T)
%% exploration-exploitation tradeoff - max sampling
    %%---> STATES: 1-K Explore, 2-Groom
    %%---> [L,Srec,Sper,AntTO,Trem]
    L = zeros(T+1,N);        % load array: (times) x (ants)
    L(1,1:NL) = AL;          % initial load vector, first NL ants have nonzero load
    Srec = ones(T+1,N);      % state array received: (times) x (ants) (1-nothing, 2-grooming)
    Sper = ones(T+1,N);      % state array performed: (times) x (ants) (1-explore, 2-groom)
    AntTO = zeros(T+1,N);    % exploring/grooming AntTO: (times) x (ants)
    for ant = 1:N
        ants = randperm(N,K);               % pick K ants to sample
        [~,antmax] = max(L(1,ants));        % load and id of the sampled ant with max load
        antmax = ants(antmax(1));           % first of the ants that have maximal load
        AntTO(1,ant) = antmax;              % pick a new ant
    end
    
    Trem = zeros(T+1,N);    % how much time units are remaining in this state including now. If 1 them new sampling is done
    Trem(1,:) = tE;         % initial state is Explore
    it = 0;                 % iterator (time/frame), starts in the loop with 1
    itm = 0;                % time check
    ir = 0;                 % random iterator

    %%---------->
    
    while it < T        % iterates until terminal time reached
        it = it+1;
        itm = itm + 1;
        if it>itm*100000
            fprintf(1,'\n(M) T=%d',it)
            itm = itm + 1;
        end
            
        for ant = 1:N % the focal ant that grooms, etc

            L(it+1,:) = L(it,:);
            if Trem(it,ant) == 1
                ants = randperm(N,K);           % pick K ants to sample
                [~,antmax] = max(L(it,ants));   % load and id of the sampled ant with max load
                
                antmax = ants(antmax(1));       % first of the ants that have maximal load
                AntTO(it+1,ant) = antmax;       % pick a new ant

                if Sper(it,ant) == 2
                    Sper(it+1,ant) = 1;         % (E) phase
                    dL = min(rV*L(it,AntTO(it,ant))/(L(it,AntTO(it,ant))+rK),L(it,AntTO(it,ant)));     % load changes according to the current state, not updated
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant)) - dL; % update load of the receiving ant
                else
                    Sper(it+1,ant) = 2;         % (G) phase
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant));      % load does not change
                end
                                
                if Sper(it+1,ant) == 2                              % state overwrite only if the state is G, time overwrite according to the new state
                    AntTO(it+1,ant) = AntTO(it,ant);                % the same ant but started to groom it ?
                    Srec(it+1,AntTO(it+1,ant)) = 2;                 % change the state in the received state vector - if state is G
                    Trem(it+1,ant) = tG;                            % G state duration
                else
                    Trem(it+1,ant) = K*tE;                          % E state duration
                end
            else
                Trem(it+1,ant) = Trem(it,ant) - 1;  % update remaining time
                Sper(it+1,ant) = Sper(it,ant);      % no change in the state
                AntTO(it+1,ant) = AntTO(it,ant);    % no change in the target ant
                if Sper(it,ant) == 2                % load changes according to the current state, not updated
                    dL = min(rV*L(it,AntTO(it,ant))/(L(it,AntTO(it,ant))+rK),L(it,AntTO(it,ant)));     % change of the load
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant)) - dL; % update load of the receiving ant
                else
                    L(it+1,AntTO(it,ant)) = L(it,AntTO(it,ant));      % load does not change 
                end
                
                if Sper(it+1,ant) == 2              % state overwrite only if the new state is G
                    Srec(it+1,AntTO(it,ant)) = 2;   % no change in the received state, but do not want to replace 2 by 1
                end
            end 
        end
    end
end
    

function[] = fun_plot(F,L,Srec,Sper,AntTO,Trem,N,NL,L0,T,ML)
    [val,idx] = sort(L(1,1:N),'descend');
    figure(F); clf
    set(gcf,'color',[1,1,1])
    
    subplot(3,1,1)
    hold on; box on
    dT = T/10;
    h = pcolor(L(:,idx)'); caxis([0,ML])
    xticks([0:dT:T])
    xticklabels([0:dT:T])
    set(h, 'EdgeColor', 'none');
    set(gca,'fontsize',16)
    colormap(gca,flipud(gray(100)))
    xlim([0,T])
    ylim([1,N])
    xlabel('time'); ylabel('ID Ant')
    plot([0,T],[N,N],'color','k','linewidth',0.5)
    plot([0,T],[1,1],'color','k','linewidth',0.5)
    plot([0,0],[1,N],'color','k','linewidth',0.5)
    plot([T,T],[1,N],'color','k','linewidth',0.5)
    title('Perturbation load')

    subplot(3,1,2)
    hold on
    data = zeros(N+1,T+1);
    Srec_sort = Srec(:,idx);
    data(1:end-1,:) = Srec_sort';
    h = pcolor(data);
    xticks([0:dT:T])
    xticklabels([0:dT:T])
    caxis([0,2])
    set(h, 'EdgeColor', 'none');
    %colormap(flipud(gray))
    mymap = [0 0 0; 1 1 1; 0.7 0.3 0.3];
    colormap(gca,mymap)
    set(gca,'fontsize',16)
    xlim([0,T]); ylim([1,N])
    xlabel('time'); ylabel('ID Ant')
    plot([0,T],[N,N],'color','k','linewidth',0.5)
    plot([0,T],[1,1],'color','k','linewidth',0.5)
    plot([0,0],[1,N],'color','k','linewidth',0.5)
    plot([T,T],[1,N],'color','k','linewidth',0.5)
    title('Received grooming')
    
    subplot(3,1,3)
    hold on
    data = zeros(N+1,T+1);
    Sper_sort = Sper(:,idx);
    data(1:end-1,:) = Sper_sort';
    h = pcolor(data);
    xticks([0:dT:T])
    xticklabels([0:dT:T])
    caxis([0,2])
    set(h, 'EdgeColor', 'none');
    %colormap(flipud(gray))
    mymap = [ 0 0 0; 1 1 1; 0.3 0.7 0.3];
    colormap(gca,mymap)
    set(gca,'fontsize',16)
    xlim([0,T]); ylim([1,N])
    xlabel('time'); ylabel('ID Ant')
    plot([0,T],[N,N],'color','k','linewidth',0.5)
    plot([0,T],[1,1],'color','k','linewidth',0.5)
    plot([0,0],[1,N],'color','k','linewidth',0.5)
    plot([T,T],[1,N],'color','k','linewidth',0.5)
    title('Performed grooming')
end
  

